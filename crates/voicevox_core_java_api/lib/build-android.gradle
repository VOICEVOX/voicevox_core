plugins {
    id 'com.android.library' version '8.1.1'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.android' version '1.9.10'
}

version = gradle.ext.version

repositories {
    google()
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: gradle.ext.gsonVersion

    // https://mvnrepository.com/artifact/jakarta.validation/jakarta.validation-api
    implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: gradle.ext.jakartaValidationVersion

    // https://mvnrepository.com/artifact/jakarta.annotation/jakarta.annotation-api
    implementation group: 'jakarta.annotation', name: 'jakarta.annotation-api', version: gradle.ext.jakartaAnnotationVersion

    implementation group: 'com.microsoft.onnxruntime', name: 'onnxruntime-android', version: gradle.ext.onnxruntimeVersion
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

android {
    compileSdkVersion 26

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 26
    }
    namespace "jp.hiroshiba.voicevoxcore"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ["./src/main/resources/jniLibs"]
        }
    }
    publishing {
        singleVariant("release") {
            withJavadocJar()
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'jp.hiroshiba.voicevoxcore'
            artifactId = gradle.ext.targetDevice == 'cpu' ? 'voicevoxcore-android' : "voicevoxcore-android-${gradle.ext.targetDevice}"
            version = gradle.ext.version

            afterEvaluate {
                from components.release
            }
        }
    }
}
