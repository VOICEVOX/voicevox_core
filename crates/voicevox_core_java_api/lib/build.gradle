/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.2.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id "com.diffplug.spotless" version "6.20.0"
}

def String cargoToml = file('../../../Cargo.toml').text
def String cargoTomlVersion = (cargoToml =~ /version = "([0-9.]+)"/)[0][1]

def String target = System.getenv('TARGET')?.toLowerCase() ?: "cpu"
def boolean isGpu = target.contains('cuda') || target.contains('directml')

version = cargoTomlVersion

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

    // https://mvnrepository.com/artifact/jakarta.validation/jakarta.validation-api
    implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.0.2'

    if (isGpu) {
        implementation group: 'com.microsoft.onnxruntime', name: 'onnxruntime_gpu', version: '1.14.0'
    } else {
        implementation group: 'com.microsoft.onnxruntime', name: 'onnxruntime', version: '1.14.0'
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}
tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

spotless {
    java {
        googleJavaFormat()
    }
}
