/* automatically generated by rust-bindgen 0.60.1 */

pub const _LIBCPP_VERSION: u32 = 12000;
pub const _LIBCPP_ABI_VERSION: u32 = 1;
pub const _LIBCPP_STD_VER: u32 = 11;
pub const _LIBCPP_OBJECT_FORMAT_MACHO: u32 = 1;
pub const _LIBCPP_HIDE_FROM_ABI_PER_TU: u32 = 1;
pub const _LIBCPP_DEBUG_LEVEL: u32 = 0;
pub const _LIBCPP_LOCALE__L_EXTENSIONS: u32 = 1;
pub const _LIBCPP_HAS_CATOPEN: u32 = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_nullptr_t {
    pub __lx: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_nullptr_t___nat {
    pub __for_bool_: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_std_nullptr_t___nat() {
    assert_eq!(
        ::std::mem::size_of::<std_nullptr_t___nat>(),
        4usize,
        concat!("Size of: ", stringify!(std_nullptr_t___nat))
    );
    assert_eq!(
        ::std::mem::align_of::<std_nullptr_t___nat>(),
        4usize,
        concat!("Alignment of ", stringify!(std_nullptr_t___nat))
    );
    fn test_field___for_bool_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<std_nullptr_t___nat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__for_bool_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(std_nullptr_t___nat),
                "::",
                stringify!(__for_bool_)
            )
        );
    }
    test_field___for_bool_();
}
#[test]
fn bindgen_test_layout_std_nullptr_t() {
    assert_eq!(
        ::std::mem::size_of::<std_nullptr_t>(),
        8usize,
        concat!("Size of: ", stringify!(std_nullptr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<std_nullptr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(std_nullptr_t))
    );
    fn test_field___lx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<std_nullptr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__lx) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(std_nullptr_t),
                "::",
                stringify!(__lx)
            )
        );
    }
    test_field___lx();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_is_integral {
    pub _address: u8,
}
pub const std___libcpp_is_integral_value: std___libcpp_is_integral__bindgen_ty_1 =
    std___libcpp_is_integral__bindgen_ty_1::value;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum std___libcpp_is_integral__bindgen_ty_1 {
    value = 0,
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_bool__close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_char16_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_char32_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_unsigned_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_unsigned_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0___int128_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___libcpp_is_integral_open0_unsigned___int128_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___libcpp_is_integral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___libcpp_is_integral)
        )
    );
}
extern "C" {
    pub fn OpenJTalk_create() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OpenJTalk_extract_fullcontext(
        openjtalk: *mut ::std::os::raw::c_void,
        text: *const ::std::os::raw::c_char,
        size: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenJTalk_load(
        openjtalk: *mut ::std::os::raw::c_void,
        dn_mecab: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OpenJTalk_clear(openjtalk: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn OpenJTalk_delete(openjtalk: *mut ::std::os::raw::c_void);
}
