name: test workflow
on:
  push:
  pull_request:
  release:
    types:
      - published
jobs:
  rust-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
      - run: cargo clippy --all-features --features onnxruntime/disable-sys-build-script --tests -- -D clippy::all -D warnings --no-deps
      - run: cargo clippy --all-features --features onnxruntime/disable-sys-build-script -- -D clippy::all -D warnings --no-deps
      - run: cargo fmt -- --check

  rust-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            additional-features: ""
          - os: windows-2022
            additional-features: ""
          - os: windows-2019
            additional-features: directml
          - os: windows-2022
            additional-features: directml
          - os: macos-11
            additional-features: ""
          - os: macos-12
            additional-features: ""
          - os: ubuntu-18.04
            additional-features: ""
          - os: ubuntu-20.04
            additional-features: ""
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
        if: matrix.os == 'windows-2019'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: matrix.os == 'windows-2019'
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
        with:
          # cargoのキャッシュが原因でテストが失敗する場合はバージョン部分をカウントアップすること
          key: "v2-cargo-test-cache-${{ matrix.additional-features }}-${{ matrix.os }}"
      - name: Run cargo test
        shell: bash
        run: cargo test --features generate-c-header,${{ matrix.additional-features }}

  build-unix-cpp-example:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            artifact_name: osx-x64-cpu-cpp-shared
          - os: ubuntu-latest
            artifact_name: linux-x64-cpu-cpp-shared
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: build voicevox_core
        run: cargo build --features generate-c-header
      - name: 必要なfileをunix用exampleのディレクトリに移動させる
        run: |
          cp -v target/core.h example/cpp/unix/
          cp -v target/debug/libcore.{so,dylib} example/cpp/unix/ || true
          cp -v target/debug/build/onnxruntime-sys-*/out/onnxruntime_*/onnxruntime-*/lib/libonnxruntime.so.* example/cpp/unix/ || true
          cp -v target/debug/build/onnxruntime-sys-*/out/onnxruntime_*/onnxruntime-*/lib/libonnxruntime.*.dylib example/cpp/unix/ || true

      - if: startsWith(matrix.os, 'mac')
        uses: jwlawson/actions-setup-cmake@v1.9
      - name: Install build dependencies
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake
      - name: Build
        shell: bash
        run: |
          cd example/cpp/unix
          cmake -S . -B build
          cmake --build build

env:
  CARGO_TERM_COLOR: always
