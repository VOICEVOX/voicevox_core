name: test workflow
on:
  push:
    branches: 
      - main
  pull_request:
    paths:
      - crates/voicevox_core**
      - Cargo.*
      - rust-toolchain
jobs:
  test-lint-build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            features: ""
          - os: windows-2022
            features: ""
          - os: windows-2019
            features: directml
          - os: windows-2022
            features: directml
          - os: macos-11
            features: ""
          - os: macos-12
            features: ""
          - os: ubuntu-20.04
            features: ""
          - os: ubuntu-22.04
            features: ""
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Set up Rust (test only)
        if: matrix.os != "windows-2022"
        uses: ./.github/actions/rust-toolchain-from-file
      - name: Set up Rust (test and lint)
        if: matrix.os == "windows-2022"
        uses: ./.github/actions/rust-toolchain-from-file
        with:
          components: clippy,rustfmt
      - name: Validate Cargo.lock
        run: cargo metadata --locked --format-version 1 > /dev/null
      - name: Install cargo-binstall
        uses: taiki-e/install-action@cargo-binstall
      - name: Install cbindgen
        uses: ./.github/actions/cargo-binstall-cbindgen
      - name: Generate voicevox_core_1.h
        run: cbindgen --crate voicevox_core_c_api -o ./voicevox_core_1.h
      - name: Generate voicevox_core_2.h
        run: cargo xtask generate-c-header -o ./voicevox_core_2.h
      - name: Assert these header files are same
        run: diff -u --color=always ./voicevox_core_{1,2}.h
      - uses: Swatinem/rust-cache@v2
        with:
          # cargoのキャッシュが原因でテストが失敗する場合はバージョン部分をカウントアップすること
          key: "v2-cargo-test-cache-${{ matrix.features }}-${{ matrix.os }}"
      - name: Run cargo test
        shell: bash
        run: cargo test -vv --features ,${{ matrix.features }}
      - run: cargo clippy -vv --all-features --features onnxruntime/disable-sys-build-script --tests -- -D clippy::all -D warnings --no-deps
        if: matrix.os == "windows-2022"
      - run: cargo clippy -vv --all-features --features onnxruntime/disable-sys-build-script -- -D clippy::all -D warnings --no-deps
        if: matrix.os == "windows-2022"
      - run: cargo fmt -- --check
        if: matrix.os == "windows-2022"
      - name: venv作成
        uses: ./.github/actions/create-venv
      - shell: bash
        run: pip install -r ./crates/voicevox_core_python_api/requirements.txt
      - shell: bash
        run: cargo build -p voicevox_core_c_api -vv
      - shell: bash
        run: maturin build --manifest-path ./crates/voicevox_core_python_api/Cargo.toml --locked
      - shell: bash
        run: maturin develop --manifest-path ./crates/voicevox_core_python_api/Cargo.toml --locked
      - name: 必要なDLLをカレントディレクトリにコピー
        run: |
          cp -v target/debug/build/onnxruntime-sys-*/out/onnxruntime_*/onnxruntime-*/lib/onnxruntime.dll . || true
          cp -v target/debug/build/onnxruntime-sys-*/out/onnxruntime_*/onnxruntime-*/lib/libonnxruntime.so.* . || true
          cp -v target/debug/build/onnxruntime-sys-*/out/onnxruntime_*/onnxruntime-*/lib/libonnxruntime.*.dylib . || true
      - name: '`maturin develop`でインストールした`voicevox_core_python_api`を実行'
        shell: python
        run: |
          import voicevox_core
          print(voicevox_core)

env:
  CARGO_TERM_COLOR: always
