name: build and deploy workflow
on:
  workflow_dispatch:
    inputs:
      version:
        description: "バージョン情報（A.BB.C / A.BB.C-preview.D）"
        required: true
      code_signing:
        description: "コード署名する"
        type: boolean
        required: false
  release:
    types:
      - published
  pull_request:
  push:
    branches:
      - "*"
      - "**/*"
env:
  # releaseタグ名か、workflow_dispatchでのバージョン名か、DEBUGが入る
  VERSION: ${{ github.event.release.tag_name || github.event.inputs.version || 'DEBUG' }}

  # Raw character weights are not public.
  # Skip uploading to GitHub Release on public repo.
  SKIP_UPLOADING_RELEASE_ASSET: ${{ secrets.SKIP_UPLOADING_RELEASE_ASSET || '1' }}
jobs:
  build_and_deploy:
    environment: ${{ github.event.inputs.code_signing == 'true' && 'code_signing' || '' }} # コード署名用のenvironment
    strategy:
      matrix:
        include:
          - os: windows-latest
            features: ""
            target: x86_64-pc-windows-msvc
            artifact_name: windows-x64-cpu
            use_cuda: false
          - os: windows-latest
            features: directml
            target: x86_64-pc-windows-msvc
            artifact_name: windows-x64-directml
            use_cuda: false
          - os: windows-latest
            features: ""
            target: x86_64-pc-windows-msvc
            artifact_name: windows-x64-cuda
            use_cuda: true
          - os: windows-latest
            features: ""
            target: i686-pc-windows-msvc
            artifact_name: windows-x86-cpu
            use_cuda: false
          - os: ubuntu-latest
            features: ""
            target: x86_64-unknown-linux-gnu
            artifact_name: linux-x64-cpu
            use_cuda: false
          - os: ubuntu-latest
            features: ""
            target: x86_64-unknown-linux-gnu
            artifact_name: linux-x64-gpu
            use_cuda: true
          - os: macos-latest
            features: ""
            target: aarch64-apple-darwin
            artifact_name: osx-aarch64-cpu
            use_cuda: false
          - os: macos-latest
            features: ""
            target: x86_64-apple-darwin
            artifact_name: osx-x64-cpu
            use_cuda: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: ${{ contains(matrix.artifact_name,'x86') && 'x86' || 'x64' }}
      - uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.target }}
          default: true
      - uses: actions-rs/install@v0.1
        if: ${{ env.VERSION != 'DEBUG' }}
        with:
          crate: set-cargo-version
          version: latest
      - name: Install cargo-binstall
        uses: taiki-e/install-action@cargo-binstall
      - name: Install cbindgen
        run: cargo binstall cbindgen@^0.24 --no-confirm
      - name: set cargo version
        if: ${{ env.VERSION != 'DEBUG' }}
        shell: bash
        run: |
          for cargo_toml in $( echo ./crates/voicevox_core_*/Cargo.toml ); do
            set-cargo-version $cargo_toml ${{ env.VERSION }}
          done
      - name: generate voicevox_core.h
        shell: bash
        run: cbindgen --crate voicevox_core_c_api -o ./voicevox_core.h
      - name: build voicevox_core_c_api
        run: cargo build -p voicevox_core_c_api --features ${{ matrix.features }}, --target ${{ matrix.target }} --release
        env:
          ORT_USE_CUDA: ${{ matrix.use_cuda }}
      - name: build voicevox_core_python_api
        id: build-voicevox-core-python-api
        shell: bash
        run: |
          pip install -r ./crates/voicevox_core_python_api/requirements.txt
          maturin build --manifest-path ./crates/voicevox_core_python_api/Cargo.toml --features ${{ matrix.features }}, --target ${{ matrix.target }} --release
          printf '::set-output name=whl::%s\n' "$(find ./target/wheels -type f)"
        env:
          ORT_USE_CUDA: ${{ matrix.use_cuda }}
      - name: Set ASSET_NAME env var
        shell: bash
        run: echo "ASSET_NAME=voicevox_core-${{ matrix.artifact_name }}-${{ env.VERSION }}" >> $GITHUB_ENV
      - name: Organize artifact
        shell: bash
        run: |
          mkdir -p "artifact/${{ env.ASSET_NAME }}"
          cp -v voicevox_core.h "artifact/${{ env.ASSET_NAME }}"
          cp -v target/${{ matrix.target }}/release/*.{dll,so,dylib} "artifact/${{ env.ASSET_NAME }}" || true
          cp -v target/${{ matrix.target }}/release/voicevox_core.dll.lib "artifact/${{ env.ASSET_NAME }}/voicevox_core.lib" || true
          cp -v -n target/${{ matrix.target }}/release/build/onnxruntime-sys-*/out/onnxruntime_*/onnxruntime-*/lib/*.{dll,so.*,so,dylib} "artifact/${{ env.ASSET_NAME }}" || true
          # libonnxruntimeについてはバージョン付のshared libraryを使用するためバージョンがついてないものを削除する
          rm -f artifact/${{ env.ASSET_NAME }}/libonnxruntime.{so,dylib}
          cp -v README.md "artifact/${{ env.ASSET_NAME }}/README.txt"
          echo "${{ env.VERSION }}" > "artifact/${{ env.ASSET_NAME }}/VERSION"
      - name: Code signing (Windows)
        if: startsWith(matrix.os, 'windows') && github.event.inputs.code_signing == 'true'
        shell: bash
        run: |
          bash build_util/codesign.bash "artifact/${{ env.ASSET_NAME }}/voicevox_core.dll"
        env:
          CERT_BASE64: ${{ secrets.CERT_BASE64 }}
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
      - name: Archive artifact
        shell: bash
        if: (!contains(matrix.os , 'windows'))
        run: |
          cd artifact
          zip -r "../${{ env.ASSET_NAME }}.zip" "${{ env.ASSET_NAME }}"
      - name: Archive artifact (Windows)
        if: contains(matrix.os, 'windows')
        run: |
          powershell Compress-Archive -Path "artifact/${{ env.ASSET_NAME }}" -DestinationPath "${{ env.ASSET_NAME }}.zip"
      - name: Upload to Release
        if: env.VERSION != 'DEBUG' && env.SKIP_UPLOADING_RELEASE_ASSET == '0'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          tag: ${{ env.VERSION }}
          file: ${{ env.ASSET_NAME }}.zip
      - name: Upload Python whl to Release
        if: env.VERSION != 'DEBUG' && env.SKIP_UPLOADING_RELEASE_ASSET == '0'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          tag: ${{ env.VERSION }}
          file: ${{ steps.build-voicevox-core-python-api.outputs.whl }}
  deploy_downloader:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Upload to Release
        if: env.VERSION != 'DEBUG' && env.SKIP_UPLOADING_RELEASE_ASSET == '0'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          file: scripts/downloads/*
          file_glob: true
          tag: ${{ env.VERSION }}
