name: build and deploy workflow
on:
  workflow_dispatch:
    inputs:
      version:
        description: "バージョン情報（A.BB.C / A.BB.C-preview.D）"
        required: true
      code_signing:
        description: "コード署名する"
        type: boolean
        required: false
  release:
    types:
      - published
  workflow_run:
    workflows: ["test workflow"]
    types:
      - completed
env:
  # releaseタグ名か、workflow_dispatchでのバージョン名か、DEBUGが入る
  VERSION: ${{ github.event.release.tag_name || github.event.inputs.version || 'DEBUG' }}

  # Raw character weights are not public.
  # Skip uploading to GitHub Release on public repo.
  SKIP_UPLOADING_RELEASE_ASSET: ${{ secrets.SKIP_UPLOADING_RELEASE_ASSET || '1' }}
jobs:
  build_and_deploy:
    environment: ${{ github.event.inputs.code_signing == 'true' && 'code_signing' }} # コード署名用のenvironment（false時の挙動は2022年7月10日時点で未定義動作）
    strategy:
      matrix:
        include:
          - os: windows-latest
            additional-features: ""
            target: x86_64-pc-windows-msvc
            artifact_name: windows-x64-cpu
            use_cuda: false
          - os: windows-latest
            additional-features: directml
            target: x86_64-pc-windows-msvc
            artifact_name: windows-x64-directml
            use_cuda: false
            directml_full: true
            directml_platform: x64-win
          - os: windows-latest
            additional-features: directml
            target: x86_64-pc-windows-msvc
            artifact_name: windows-x64-directml-min
            use_cuda: false
          - os: windows-latest
            additional-features: ""
            target: x86_64-pc-windows-msvc
            artifact_name: windows-x64-cuda
            use_cuda: true
            cudnn_download_url: https://developer.download.nvidia.com/compute/redist/cudnn/v8.4.1/local_installers/11.6/cudnn-windows-x86_64-8.4.1.50_cuda11.6-archive.zip
            cuda_version: 11.7.0
            cuda_lib_dir: bin
          - os: windows-latest
            additional-features: ""
            target: i686-pc-windows-msvc
            artifact_name: windows-x86-cpu
            use_cuda: false
          - os: ubuntu-latest
            additional-features: ""
            target: x86_64-unknown-linux-gnu
            artifact_name: linux-x64-cpu
            use_cuda: false
          - os: ubuntu-latest
            additional-features: ""
            target: x86_64-unknown-linux-gnu
            artifact_name: linux-x64-gpu
            use_cuda: true
            cudnn_download_url: https://developer.download.nvidia.com/compute/redist/cudnn/v8.4.1/local_installers/11.6/cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz
            cuda_version: 11.7.0
            cuda_lib_dir: lib64
          - os: macos-latest
            additional-features: ""
            target: aarch64-apple-darwin
            artifact_name: osx-aarch64-cpu
            use_cuda: false
          - os: macos-latest
            additional-features: ""
            target: x86_64-apple-darwin
            artifact_name: osx-x64-cpu
            use_cuda: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.target }}
          default: true
      - name: build release
        run: cargo build --features generate-c-header,${{ matrix.additional-features }} --target ${{ matrix.target }} --release
        env:
          ORT_USE_CUDA: ${{ matrix.use_cuda }}
      - name: Set ASSET_NAME env var
        shell: bash
        run: echo "ASSET_NAME=voicevox_core-${{ matrix.artifact_name }}-${{ env.VERSION }}" >> $GITHUB_ENV
      - name: Set CUDA_LIB_ASSET_NAME env var
        shell: bash
        if: ${{ matrix.use_cuda }}
        run: echo "CUDA_LIB_ASSET_NAME=voicevox_core-${{ matrix.artifact_name }}-cuda-lib-${{ env.VERSION }}" >> $GITHUB_ENV
      - name: Organize artifact
        shell: bash
        run: |
          mkdir -p "artifact/${{ env.ASSET_NAME }}"
          cp -v target/core.h "artifact/${{ env.ASSET_NAME }}"
          cp -v target/${{ matrix.target }}/release/*.{dll,so,dylib} "artifact/${{ env.ASSET_NAME }}" || true
          cp -v target/${{ matrix.target }}/release/core.dll.lib "artifact/${{ env.ASSET_NAME }}/core.lib" || true
          cp -v -n target/${{ matrix.target }}/release/build/onnxruntime-sys-*/out/onnxruntime_*/onnxruntime-*/lib/*.{dll,so.*,so,dylib} "artifact/${{ env.ASSET_NAME }}" || true
          # libonnxruntimeについてはバージョン付のshared libraryを使用するためバージョンがついてないものを削除する
          rm -f artifact/${{ env.ASSET_NAME }}/libonnxruntime.{so,dylib}
          cp -v README.md "artifact/${{ env.ASSET_NAME }}/README.txt"
          echo "${{ env.VERSION }}" > "artifact/${{ env.ASSET_NAME }}/VERSION"
      - name: Organize directml artifact
        shell: bash
        if: ${{ matrix.directml_full }}
        run: |
          directml_link=$(curl -s https://api.nuget.org/v3/registration5-semver1/microsoft.ai.directml/index.json | jq ".items[0].items | max_by(.catalogEntry.version) | .catalogEntry.packageContent" | sed "s/\"//g")
          curl -sO $directml_link
          unzip -d ./ext_directml ./microsoft.ai.directml.*.nupkg
          cp -v ext_directml/bin/${{ matrix.directml_platform }}/DirectML.dll artifact/${{ env.ASSET_NAME }}
      - name: Organize cuda lib artifact
        if: ${{ matrix.use_cuda }}
        uses: ./.github/actions/download-cuda-libraries
        with:
          cudnn_download_url: ${{ matrix.cudnn_download_url }}
          artifact_name: ${{ matrix.artifact_name }}
          cuda_version: ${{ matrix.cuda_version }}
          cuda_lib_dir: ${{ matrix.cuda_lib_dir }}
          extract_dir: artifact/${{ env.CUDA_LIB_ASSET_NAME }}
      - name: Code signing (Windows)
        if: startsWith(matrix.os, 'windows') && github.event.inputs.code_signing == 'true'
        shell: bash
        run: |
          bash build_util/codesign.bash "artifact/${{ env.ASSET_NAME }}/core.dll"
        env:
          CERT_BASE64: ${{ secrets.CERT_BASE64 }}
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
      - name: Archive artifact
        shell: bash
        if: (!contains(matrix.os , 'windows'))
        run: |
          cd artifact
          zip -r "../${{ env.ASSET_NAME }}.zip" "${{ env.ASSET_NAME }}"
      - name: Archive artifact cuda libraries
        shell: bash
        if: ${{ (!contains(matrix.os , 'windows')) && (matrix.use_cuda) }}
        run: |
          cd artifact
          zip -r "../${{ env.CUDA_LIB_ASSET_NAME }}.zip" "${{ env.CUDA_LIB_ASSET_NAME }}"
      - name: Archive artifact (Windows)
        if: contains(matrix.os, 'windows')
        run: |
          powershell Compress-Archive -Path "artifact/${{ env.ASSET_NAME }}" -DestinationPath "${{ env.ASSET_NAME }}.zip"
      - name: Archive artifact (Windows) cuda libraries
        if: ${{ contains(matrix.os, 'windows') && (matrix.use_cuda) }}
        run: |
          powershell Compress-Archive -Path "artifact/${{ env.CUDA_LIB_ASSET_NAME }}" -DestinationPath "${{ env.CUDA_LIB_ASSET_NAME }}.zip"
      - name: Upload to Release
        if: env.VERSION != 'DEBUG' && env.SKIP_UPLOADING_RELEASE_ASSET == '0'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          tag: ${{ env.VERSION }}
          file: ${{ env.ASSET_NAME }}.zip
      - name: Upload to Release cuda libraries
        if: ${{ env.VERSION != 'DEBUG' && env.SKIP_UPLOADING_RELEASE_ASSET == '0' && (matrix.use_cuda) }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          tag: ${{ env.VERSION }}
          file: ${{ env.CUDA_LIB_ASSET_NAME }}.zip
